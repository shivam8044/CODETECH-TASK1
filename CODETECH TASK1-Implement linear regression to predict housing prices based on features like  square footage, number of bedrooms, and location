import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Sample data
data = pd.DataFrame({
    'X': np.random.rand(100) * 10,
    'Y': np.random.rand(100) * 100
})

# Display the first few rows of the data
print(data.head())

# Split the data into training and testing sets
X = data[['X']]
y = data['Y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Mean Squared Error and R² Score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R² Score: {r2}")

# Plotting the scatter plot and the regression line
plt.figure(figsize=(10, 6))

# Scatter plot
sns.scatterplot(x=X_test['X'], y=y_test, label='Actual')

# Regression line
plt.plot(X_test['X'], y_pred, color='red', label='Predicted')

# Adding labels and title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Linear Regression Model')
plt.legend()

# Show the plot
plt.show()

# New data for prediction
new_data = pd.DataFrame({'X': [5, 7, 9]})

# Predict scores for new data
new_predictions = model.predict(new_data)

# Display the predictions
print(new_predictions)
